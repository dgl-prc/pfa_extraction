import os
from collections import defaultdict


class TransMatrix(object):
    def __init__(self,folder_path,number_state):
        '''
        :param folder_path: the integrated file generated by info_integrate
        :param number_state:
        '''
        self.trans = self.init_trans(number_state)
        self.build_trans_matrix(folder_path)

    def init_trans(self,num_state):
        trans = []
        for i in range(num_state+1): #row
            i_row=[]
            for j in range(num_state+1):
                i_row.append({})
            trans.append(i_row)
        return trans


    def build_trans_matrix(self,folder_path):
        """
        :param number_state:
        :param folder_path: the folder path of intergrated files
        :return:
        """
        # 1-index
        files_list = os.listdir(folder_path)
        files_list.sort(key=lambda x:int(x.split(".")[0]))
        for file_name in files_list:
            with open(os.path.join(folder_path,file_name),"r") as f:
                start_state = -1
                trigger_word = ""
                for i, line in enumerate(f.readlines()):
                    if i==0:
                        continue
                    eles = [s.strip() for s in line.split(",")]

                    if len(eles) == 3:
                        stateid = int(eles[0])
                    else:
                        stateid,cur_word = int(eles[0]),eles[3]

                    if i!=1:
                        if self.trans[start_state][stateid] is 0:
                            self.trans[start_state][stateid] = {}
                        if trigger_word in self.trans[start_state][stateid].keys():
                            self.trans[start_state][stateid][trigger_word] += 1
                        else:
                            self.trans[start_state][stateid][trigger_word] = 1
                    if len(eles) == 3:
                        break

                    start_state = stateid
                    trigger_word = cur_word

    def get_next_state(self,current_state,trigger_word):
        possibe_next=[]
        for next_state,dict in enumerate(self.trans[current_state]):
            if dict.has_key(trigger_word):
                possibe_next.append((next_state,dict[trigger_word]))
        if len(possibe_next) == 0:
            return -1
        possibe_next.sort(key=lambda x:x[1])
        return possibe_next[-1][0]

    def get_next_states(self,current_state,trigger_word):
        possibe_next=[]
        for next_state,dict in enumerate(self.trans[current_state]):
            if dict.has_key(trigger_word):
                possibe_next.append((next_state,dict[trigger_word]))
        if len(possibe_next) == 0:
            return [-1]
        return [state[0] for state in possibe_next]





if __name__ == '__main__':

    folder_path = "../prism-data/2018-12-14/18-26-13/GRU/8000/data-group-1/k-4/experiment/rnn_independent_acc_test/test_data/2018-12-19/11-29-15/info_integtate"
    number_state = 7
    trans_matrix = TransMatrix(folder_path, number_state)
    # print("Done")
    # for i in range(8):
    #     for j in range(8):
    #         print("state {} ----> state {}".format(i,j))
    #         print trans.trans[i][j]
    print trans_matrix.get_next_state(2,"love")












